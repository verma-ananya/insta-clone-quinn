{"version":3,"sources":["logo.svg","components/Navigation/index.js","components/Footer/index.js","utils/request.js","utils/utils.js","components/ModalView/index.js","components/ImageCalendar/index.js","components/Post/index.js","components/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","state","className","href","Component","Footer","to","axios","require","default","url","get","isEmpty","object","isNil","formatDate","dateStr","n","slice","postSortCompare","a","b","timeInSeconds","ModalView","props","this","title","header","footer","children","onClose","size","onNext","onPrevious","Modal","show","onHide","centered","Header","closeButton","Title","Body","onClick","defaultProps","ImageCalendar","fetchPosts","request","then","data","forEach","post","index","moment","CreatedOnTimestamp","unix","Images","length","sortedPosts","sort","sortedPostImages","image","push","postIndex","imageUrl","setState","posts","images","catch","error","alert","console","log","nextExpandedImage","currentExpandedPostIndex","currentExpandedImageIndex","totalPostCount","isCurrentPostOver","imageCount","prevState","previousExpandedImage","renderExpandedImageModal","currentPost","currentImageUrl","src","profilePictureUrl","alt","UserId","description","resetAction","showExpandedImageModal","isShowingImageModal","onChange","calDate","renderDateTileContent","date","view","tileDate","toISOString","firstPostIndex","l","r","mid","parseInt","String","findFirstPost","firstPost","key","Date","Fragment","value","tileContent","PureComponent","Post","nextImage","currentImageIndex","postImages","previousImage","userImage","userName","postDate","caption","location","ref","utcOffset","format","Home","renderPosts","map","reverse","pageVariants","initial","opacity","in","transition","duration","App","path","div","animate","variants","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.87f722fa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport \"./navbar.css\";\n\nclass NavBar extends Component {\n    state = {  }\n    render() { \n        return ( \n            <nav className=\"Nav\">\n                <div className=\"Nav-menus\">\n                    <div className=\"Nav-brand\">\n                        <a className=\"Nav-brand-logo\" href=\"/\">\n                        Quinn Feed\n                        </a>\n                    </div>\n                </div>\n            </nav> \n         );\n    }\n}\n \nexport default NavBar;","import React, { Component } from 'react';\nimport \"./footer.css\";\nimport {Link} from \"react-router-dom\";\n\nclass Footer extends Component {\n    render() { \n        return ( \n            <div className=\"footer navbar-fixed-bottom\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"home col-6\">\n                            <Link to=\"/\">\n                                <i className=\"material-icons\">home</i>\n                            </Link>\n                        </div>\n                        <div className=\"calendar col-6\">\n                            <Link to=\"/calendar\">\n                                <i className=\"material-icons\">date_range</i>         \n                            </Link>                   \n                        </div>\n                    </div>\n                </div>\n          </div>\n         );\n    }\n}\n \nexport default Footer;","const axios = require('axios').default;\nconst get = (url) => axios.get(url);\nconst post = (url, payload) => axios.post(url, payload);\n\nexport default {\n  get,\n  post\n};","import moment from 'moment';\n\nexport const isEmpty = object => {\n  if(object===[] || object==={}) return true;\n  else return false;\n}\n\nexport const isNil = object => {\n  if(object===null) return true;\n  else return false;\n}\n\nexport const formatDate = (dateStr, n) => {\n  return dateStr.slice(0,n);\n}\n\nexport const beautifyDate = (dateStr) => {\n\n  var date = moment(dateStr).utcOffset(\"+05:30\").format(\"MMMM Do YYYY\");\n  return date;\n\n}\n\nexport const postSortCompare = (a,b) => {\n  if (a.timeInSeconds < b.timeInSeconds) return -1;\n  else if (a.timeInSeconds > b.timeInSeconds) return 1;\n  else return 0;\n}\n\nexport default {\n  isEmpty,\n  isNil,\n  formatDate,\n  postSortCompare\n};","import React, { Component } from 'react';\nimport { Modal } from 'react-bootstrap';\nimport './modalView.css';\nimport { Link } from 'react-router-dom';\n\nclass ModalView extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n    render() { \n      const {\n        title,\n        header,\n        footer,\n        children,\n        onClose,\n        size,\n        onNext,\n        onPrevious,\n      } = this.props;\n      \n      return (\n        <Modal show={true} onHide={onClose} size={size} centered>\n          {title && <Modal.Header closeButton>\n            <Modal.Title>{title}</Modal.Title>\n          </Modal.Header>}\n\n          {header && <Modal.Header closeButton>\n            {header}\n          </Modal.Header>}\n\n          <Modal.Body className=\"pad-0\">\n            <div className=\"container-fluid pad-0\">\n              <div className=\"row pad-0 modal-row\">\n                <div className=\"pad-0 col-1\">\n                  <Link> <i className=\"material-icons arrow\" onClick={onPrevious}> navigate_before </i> </Link>\n                </div>\n                <div className=\"pad-4 col-10\">\n                  {children}\n                </div>\n                <div className=\"pad-0 col-1\">\n                  <Link> <i className=\"material-icons arrow\" onClick={onNext}> navigate_next </i> </Link>\n                </div>\n              </div>\n            </div>\n          </Modal.Body>\n\n          {footer && <Modal.Footer>\n            {footer}\n          </Modal.Footer>}\n        </Modal>\n      );\n  }\n}\n\nModalView.defaultProps = {\n  title : null,\n  footer: null,\n};\n \nexport default ModalView;","import React, { PureComponent } from 'react';\nimport Calendar from 'react-calendar';\nimport './calendar.css';\nimport 'react-calendar/dist/Calendar.css';\nimport request from '../../utils/request.js';\nimport { isEmpty, isNil, formatDate, postSortCompare, beautifyDate } from '../../utils/utils';\nimport moment from 'moment';\nimport ModalView from '../ModalView';\n\nconst POSTS_API = 'https://quinncareapi.azurewebsites.net/api/assignment/posts';\n\nconst findFirstPost = (sortedPosts, timeInSeconds) => {\n  if(isNil(sortedPosts) || isEmpty(sortedPosts) || timeInSeconds<0) return -1;\n\n  const n = sortedPosts.length;\n  var l = 0;\n  var r = n-1;\n  \n  while(l<=r) {\n    var mid = parseInt(String((l+r)/2));\n    \n    if(sortedPosts[mid].timeInSeconds < timeInSeconds) l = mid + 1;\n    else if(sortedPosts[mid].timeInSeconds > timeInSeconds) r = mid - 1;\n    else return mid;\n  }\n\n  return -1;\n}\n\nclass ImageCalendar extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      calDate: new Date(),\n      isShowingImageModal: false,\n      currentExpandedPostIndex: null,\n      currentExpandedImageIndex: null,\n      posts: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchPosts();\n  }\n\n  fetchPosts = () => {\n    request.get(POSTS_API)\n      .then(({data}) => {\n        data.forEach((post, index) => {\n          data[index][\"timeInSeconds\"] = moment(formatDate(post.CreatedOnTimestamp, 10), 'YYYY-MM-DD').unix();\n          data[index][\"imageCount\"] = post.Images.length;\n        });\n        const sortedPosts = data.sort(postSortCompare);\n        const sortedPostImages = [];\n        sortedPosts.forEach((post, index) => {\n          post.Images.forEach(image => {\n            sortedPostImages.push({\n              postIndex: index,\n              imageUrl: image[\"ImageUrl\"]\n            });\n          });\n        });\n        this.setState({\n          posts: sortedPosts,\n          images: sortedPostImages,\n        });\n      })\n      .catch(error => {\n        alert(\"API call failed!\");\n        console.log(error);\n      });\n  }\n\n  nextExpandedImage = () => {\n    const { \n      posts,\n      currentExpandedPostIndex,\n      currentExpandedImageIndex\n    } = this.state;\n\n    const totalPostCount = posts.length;\n    const currentPostImageCount = posts[currentExpandedPostIndex].imageCount;\n    const isCurrentPostOver = ((currentExpandedImageIndex+1)===currentPostImageCount);\n\n    if(isCurrentPostOver && (currentExpandedPostIndex===(totalPostCount-1))) {\n      alert(\"No more posts available!\");\n      return;\n    }\n\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        currentExpandedPostIndex: isCurrentPostOver \n                                    ? prevState.currentExpandedPostIndex + 1\n                                    : prevState.currentExpandedPostIndex,\n        currentExpandedImageIndex: isCurrentPostOver\n                                    ? 0\n                                    : prevState.currentExpandedImageIndex + 1,\n      };\n    });\n  }\n\n  previousExpandedImage = () => {\n    const { \n      currentExpandedPostIndex,\n      currentExpandedImageIndex\n    } = this.state;\n\n    const isCurrentPostOver = (currentExpandedImageIndex===0);\n\n    if(isCurrentPostOver && (currentExpandedPostIndex===0)) {\n      alert(\"No more posts available!\");\n      return;\n    }\n\n    this.setState(prevState => {\n      return {\n        ...prevState,\n        currentExpandedPostIndex: isCurrentPostOver \n                                    ? prevState.currentExpandedPostIndex - 1\n                                    : prevState.currentExpandedPostIndex,\n        currentExpandedImageIndex: isCurrentPostOver\n                                    ? 0\n                                    : prevState.currentExpandedImageIndex - 1,\n      };\n    });\n  }\n \n  renderExpandedImageModal = () => {\n    const { \n      posts,\n      currentExpandedPostIndex,\n      currentExpandedImageIndex\n    } = this.state;\n\n    const currentPost = posts[currentExpandedPostIndex];\n    const currentImageUrl = posts[currentExpandedPostIndex].Images[currentExpandedImageIndex][\"ImageUrl\"];\n\n    return (\n      <ModalView\n        header={\n          <div className=\"header-user row\">\n            <div className=\"Post-user-avatar pad-0\">\n              <img src={currentPost.profilePictureUrl} alt={currentPost.UserId} />\n            </div>\n            <div className=\"header col-8\">\n              <div className=\"header-username\">\n                <span>{currentPost.UserId}</span>\n              </div>\n              <div className=\"Post-date\">\n                <span>{formatDate(currentPost.CreatedOnTimestamp, 10)}</span>\n              </div>\n            </div>\n          </div>\n        }\n        size={\"lg\"}\n        footer={\n          <div className=\"Post-caption\">\n            <strong> {currentPost.UserId} </strong> \n            <span> {currentPost.description} </span>\n          </div>\n        }\n        onClose={this.resetAction}\n        onNext={this.nextExpandedImage}\n        onPrevious={this.previousExpandedImage}\n      >\n        <img className=\"modal-img\" src={currentImageUrl}/>\n      </ModalView>\n    );\n  }\n\n  showExpandedImageModal = (currentExpandedPostIndex) => {\n    this.setState({\n      isShowingImageModal: true,\n      currentExpandedPostIndex,\n      currentExpandedImageIndex: 0\n    });\n  }\n\n  resetAction = () => {\n    this.setState({\n      isShowingImageModal: false,\n      currentExpandedPostIndex: null,\n      currentExpandedImageIndex: null\n    });\n  }\n\n  onChange = (calDate) => {\n    this.setState({\n      calDate: calDate,\n    });\n  }\n\n  renderDateTileContent = ({ date, view }) => {\n    const { posts } = this.state;\n    if(isNil(posts) || isEmpty(posts)) return null;\n    const tileDate = formatDate(date.toISOString(), 10);\n    const tileTimeInSeconds = moment(tileDate, 'YYYY-MM-DD').unix();\n    const firstPostIndex = findFirstPost(posts, tileTimeInSeconds);\n    \n    if ((firstPostIndex === -1) && (view === 'month')) return (\n      <div className=\"date-image\">\n        <img src={\"https://www.vhv.rs/dpng/d/102-1021069_empty-open-box-png-transparent-png.png\"}/>\n      </div>\n    );\n    const firstPost = posts[firstPostIndex];\n\n    return (view === 'month')\n              ? (\n                  <div className=\"date-image\">\n                    <img \n                      src={firstPost.Images[0][\"ImageUrl\"]} \n                      alt={firstPost.UserId} \n                      key={tileDate}\n                      onClick={() => {\n                        this.showExpandedImageModal(firstPostIndex);\n                      }}\n                    />\n                  </div>\n                )\n              : null;\n  }\n\n  render() {\n    const {\n      calDate,\n      isShowingImageModal,\n    } = this.state;\n\n    return (\n      <React.Fragment>\n        {isShowingImageModal && this.renderExpandedImageModal()}\n        <div className=\"result-calendar\">\n          <Calendar\n            onChange={this.onChange}\n            value={calDate}\n            tileContent={this.renderDateTileContent}\n          />\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ImageCalendar;\n","import React, { Component } from 'react';\nimport \"./post.css\";\nimport {formatDate, beautifyDate} from '../../utils/utils';\nimport { Link } from 'react-router-dom';\n\nclass Post extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentImageIndex: 0,\n    };\n  }\n\n  nextImage = () => {\n    const { \n      currentImageIndex,\n    } = this.state;\n\n    const {\n      postImages\n    } = this.props;\n\n    const imageCount = postImages.length;\n    const isLastImage = ((currentImageIndex+1)===imageCount);\n\n    if(isLastImage) {\n      return;\n    }\n\n    this.setState(prevState => {\n      return {\n        currentImageIndex: prevState.currentImageIndex + 1,\n      };\n    });\n  }\n\n  previousImage = () => {\n    const { \n      currentImageIndex,\n    } = this.state;\n\n    const isFirstImage = (currentImageIndex===0);\n\n    if(isFirstImage) {\n      return;\n    }\n\n    this.setState(prevState => {\n      return {\n        currentImageIndex: prevState.currentImageIndex - 1,\n      };\n    });\n  }\n\n  render() { \n    const {\n      userImage,\n      userName,\n      postDate,\n      postImages,\n      caption,\n      location,\n    } = this.props;\n\n    const {\n      currentImageIndex,\n    } = this.state;\n    \n    return (\n      <div className=\"container fluid\">\n        <article className=\"Post\" ref=\"Post\">\n          <header>\n            <div className=\"Post-user row\">\n              <div className=\"Post-user-avatar pad-0\">\n                <img src={userImage} alt={userName} />\n              </div>\n              <div className=\"header col-3 pad-0\">\n                <div className=\"Post-username\">\n                  <span>{userName}</span>\n                </div>\n                <div className=\"Post-location\">\n                  <span>{location}</span>\n                </div>\n              </div>\n              <div className=\"Post-date\">\n                <span>{beautifyDate(formatDate(postDate,10))}</span>\n              </div>\n            </div>\n          </header>\n          <div className=\"Post-image container-fluid pad-0\">\n            <div className=\"row pad-0 modal-row\">\n              <div className=\"pad-0 col-1\">\n                <Link> <i className=\"material-icons arrow\" onClick={this.previousImage}> navigate_before </i> </Link>\n              </div>\n              <div className=\"Post-image-bg pad-4 col-10\">\n                <img alt={userName+\"'s Post\"} src={postImages && postImages[currentImageIndex][\"ImageUrl\"]} />\n              </div>\n              <div className=\"pad-0 col-1\">\n                <Link> <i className=\"material-icons arrow\" onClick={this.nextImage}> navigate_next </i> </Link>\n              </div>\n            </div>\n          </div>\n          <div className=\"Post-caption\">\n            <strong> {userName} </strong> \n            <span> {caption} </span>\n          </div>\n        </article>\n      </div> \n    );\n  }\n}\n \nPost.defaultProps = {\n    userImage: \"\",\n    userName: \"Username\",\n    postDate: \"PostDate\",\n    postImages: [],\n    caption: \"Caption\",\n}\n\nexport default Post;","import React, { Component } from 'react';\nimport Post from '../Post/index';\nimport request from '../../utils/request.js';\nimport { formatDate, postSortCompare } from '../../utils/utils';\nimport moment from 'moment';\n\nconst POSTS_API = 'https://quinncareapi.azurewebsites.net/api/assignment/posts';\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      posts: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchPosts();\n  }\n\n  fetchPosts = () => {\n    request.get(POSTS_API)\n      .then(({data}) => {\n        data.forEach((post, index) => {\n          data[index][\"timeInSeconds\"] = moment(formatDate(post.CreatedOnTimestamp, 10), 'YYYY-MM-DD').unix();\n        });\n        this.setState({\n          posts: data.sort(postSortCompare),\n        });\n      })\n      .catch(error => {\n        alert(\"API call failed!\");\n        console.log(error);\n      });\n  }\n\n  renderPosts = () => {\n    const { posts } = this.state;\n    return posts.map((post, index) => {\n      return (<Post\n        key={index}\n        userImage={post.profilePictureUrl}\n        userName={post.UserId}\n        postDate={post.CreatedOnTimestamp}\n        postImages={post.Images}\n        caption={post.description}\n        location={\"Everywhere\"}\n      />);\n    }).reverse();\n  }\n\n  render() { \n    return (\n      <React.Fragment>\n        {this.renderPosts()}\n      </React.Fragment>\n    );\n  }\n}\n \nexport default Home;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport logo from './logo.svg';\nimport './App.css';\nimport NavBar from './components/Navigation/index';\nimport Footer from './components/Footer/index';\nimport ImageCalendar from './components/ImageCalendar/index';\nimport Home from './components/Home';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nconst pageVariants = {\n  initial: {\n    opacity: 0,\n  },\n  in: {\n    opacity: 1,\n  },\n  transition: {\n    duration: 3,\n  },\n}\n\nfunction App() {\n  return (\n    <Router>\n      <AnimatePresence>\n        <Switch>\n          <Route\n            path=\"/calendar\"\n          >\n            <motion.div className=\"calendar\"\n              initial=\"initial\"\n              animate=\"in\"\n              transition=\"transition\"\n              variants={pageVariants}\n            >\n              <NavBar/>\n              <motion.div className=\"content-area\"\n              >\n                <ImageCalendar/>\n              </motion.div>\n              <Footer/>\n            </motion.div>\n          </Route>\n\n          <Route\n            path=\"/\"\n          >\n            <motion.div className=\"home\"\n              initial=\"initial\"\n              animate=\"in\"\n              transition=\"transition\"\n              variants={pageVariants}\n            >\n              <NavBar/>\n                <motion.div className=\"content-area\"\n                >\n                  <Home />\n                </motion.div>\n              <Footer/>\n            </motion.div>\n          </Route>\n        </Switch>\n      </AnimatePresence>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}